library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
diamonds
dimnames(diamonds)
qplot(carat,cut.diamond)
qplot(carat,cut.diamonds)
qplot(carat,cut,data=diamonds)
install.packages("Rserve")
library(Rserve)
Rserve()
install.packages("igraph")
require(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("ROracle")
ds<-read.csv("d:\\Projects\\Exploratory\\drops_wide.csv")
plot(ttlcnt,yr1_drop)
ggplot()+geom_line(x=ttl_cnt,y=yr1_drop,data=ds)
library(ggplot2)
ggplot()+geom_line(x=ttl_cnt,y=yr1_drop,data=ds)
ggplot()+geom_line(x=ds$ttl_cnt,y=ds$yr1_drop,data=ds)
ggplot()+geom_line(x=ds$ttl_cnt,y=ds$yr1_drop)
ggplot(x=ds$ttl_cnt,y=ds$yr1_drop)+geom_line()
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_cnt))
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_cnt))+geo_line(0)
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_cnt))+geo_lines()
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_cnt))+geom_line()
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_drop))+geom_line()
ggplot(data=ds,aes(x=COHORT,y=yr1_drop))+geom_line()
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_drop))+geom_line()
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_drop))+geom_boxplot()
ggplot(data=ds,aes(x=ttl_cnt,y=yr1_drop,facets=cohort~.)+geom_line()
)
Rserve()
exit()
exit
exit
exit()
libaray(Rserve)
libray(Rserve)
library(Rserve)
Rserve()
exit
eit
exit
library(Rserve)
Rserve()
?chi
Chisquare
?Chisquare
require(graphics)
dchisq(1, df = 1:3)
pchisq(1, df =  3)
pchisq(1, df =  3, ncp = 0:4)  # includes the above
library(arules);
library(arulesViz);
dataset<-read.csv('C:\\Users\\gnagaraj\\Documents\\GitHub\\BAR-CoursePathways\\associations.csv');
dataset$PRSN_UNIV_ID<-as.factor(dataset$PRSN_UNIV_ID)
transactions = as(split(dataset[,"COURSES"],dataset[,"PRSN_UNIV_ID"]), "transactions");
rules = apriori(transactions, parameter=list(support=0.05));
inspect(rules)
rules.df<-as(rules,"data.frame")
sorted.rules.df<-rules.df[order(-rules.df$support),]
sorted.rules.df["sprt.r"]<-nrow(attributes(transactions)$transactionInfo)*sorted.rules.df$support
sorted.rules.df["cnfd.r"]<-nrow(attributes(transactions)$transactionInfo)*sorted.rules.df$support*sorted.rules.df$confidence
sorted.rules.df["total"]<-nrow(attributes(transactions)$transactionInfo)
View(sorted.rules.df)
dataset<-read.csv('C:\\Users\\gnagaraj\\Documents\\GitHub\\BAR-CoursePathways\\associations.csv');
dataset$PRSN_UNIV_ID<-as.factor(dataset$PRSN_UNIV_ID)
transactions = as(split(dataset[,"COURSES"],dataset[,"PRSN_UNIV_ID"]), "transactions");
rules = apriori(transactions, parameter=list(support=0.05));
inspect(rules)
rules.df<-as(rules,"data.frame")
sorted.rules.df<-rules.df[order(-rules.df$support),]
sorted.rules.df["sprt.r"]<-nrow(attributes(transactions)$transactionInfo)*sorted.rules.df$support
sorted.rules.df["cnfd.r"]<-nrow(attributes(transactions)$transactionInfo)*sorted.rules.df$support*sorted.rules.df$confidence
sorted.rules.df["total"]<-nrow(attributes(transactions)$transactionInfo)
View(sorted.rules.df)
sorted.rules.df["sprt.r"]<-round(nrow(attributes(transactions)$transactionInfo)*sorted.rules.df$support)
sorted.rules.df["cnfd.r"]<-round(nrow(attributes(transactions)$transactionInfo)*sorted.rules.df$support*sorted.rules.df$confidence)
sorted.rules.df["total"]<-nrow(attributes(transactions)$transactionInfo)
View(sorted.rules.df)
df <- read.csv("d:\Recommender\Data\train_allbiology.csv")
df <- read.csv("d:\\Recommender\\Data\\train_allbiology.csv")
hist(df$GPA)
par(mfrow=c(2,2))
hist(df$GPA)
hist(tanh(df$GPA))
hist(tanh(df$GPA/2))
hist(tanh(df$GPA/4))
hist(sinh(df$GPA/4))
hist(df$GPA)
hist(tanh(df$GPA/4))
hist(sinh(sqrt(df$GPA/4)))
hist(sqrt(df$GPA))
hist(power(df$GPA,3))
hist(power(df$GPA,3))
hist(power(df$GPA))
hist(df$GPA^(1/3))
hist(1/df$GPA^(2))
hist(1/df$GPA)
hist(1/(df$GPA)^(2))
hist(1/(df$GPA))
hist(1/(df$GPA)^(0.5))
hist(1/((df$GPA)^(0.5)))
hist(log(df$GPA))
hist(((df$GPA)^(0.5)))
hist(1/((df$GPA)^(2)))
hist(sinh(df$GPA))
hist(tanh(df$GPA))
hist(sinh(df$GPA))
df$GPA
hist(tanh(df$GPA))
hist(sinh(df$GPA/4))
sinh(df$GPA)
asinh(sinh(df$GPA))
log(sinh(df$GPA))+sqrt(sinh(df$GPA))^2+1))
log(sinh(df$GPA))+sqrt(sinh(df$GPA))^2+1)
log(sinh(df$GPA)+sqrt(sinh(df$GPA))^2+1))
log(sinh(df$GPA)+sqrt(sinh(df$GPA)^2+1))
par(mfrow=c(3,3))
hist(df$GPA)
par(mfrow=c(2,2))
hist(df$GPA)
hist(tanh(df$GPA))
hist(sinh(df$GPA))
hist(1/(df$GPA))
hist(df$courseId)
hist(df$courseId)
count.fields(df$courseId)
library(randomForest)
rf <- randomForest(Discretized_Read_Rate ~ .,data = train_df)
predict(rf,test_df[-c("Discretized_Read_Rate")])
library(randomForest)
setwd("C:/Users/gnagaraj/Downloads")
train_df=read.csv("Train_split.csv",colClasses = c("Discretized_Read_Rate"="factor"))
test_df=read.csv("Test_split.csv",colClasses = c("Discretized_Read_Rate"="factor"))
train_df <- subset(train_df,select = -c(X,id,read_rate))
test_df <- subset(test_df,select = -c(X,id,read_rate))
rf <- randomForest(Discretized_Read_Rate ~ .,data = train_df)
predictions<-predict(rf,test_df[-c("Discretized_Read_Rate")])
table(test_df$Discrerized_Read_Rate,predictions)
test_df
test_df[,-c("Discretized_Read_Rate")]
test_df[,-c(Discretized_Read_Rate)]
subset(test_df,select = -c(Discretized_Read_Rate))
predictions<-predict(rf,subset(test_df,select = -c(Discretized_Read_Rate)))
table(test_df$Discrerized_Read_Rate,prediction)
table(test_df$Discrerized_Read_Rate,predictions)
table(test_df$Discrerized_Read_Rate,predictions)
predictions
test_df$Discretized_Read_Rate
test_df['Discretized_Read_Rate']
table(test_df['Discretized_Read_Rate'],predictions)
as.list(levels(test_df["Discreized_Read_Rate"]))
as.list(levels(predictions))
as.numeric(predictions)
table(test_df['Discretized_Read_Rate'],as.numeric(predictions))
test_df['Discretized_Read_Rate']
as.list(test_df['Discretized_Read_Rate'])
as.numeric(test_df['Discretized_Read_Rate'])
as.numeric(as.character(test_df['Discretized_Read_Rate']))
(as.character(test_df['Discretized_Read_Rate'])
)
test_df['Discretized_Read_Rate']
as.list(test_df['Discretized_Read_Rate'])
as.numeric(test_df['Discretized_Read_Rate'])
as.numeric(unlist(test_df['Discretized_Read_Rate'])
)
table(as.numeric(unlist(test_df['Discretized_Read_Rate'])),as.numeric(predictions))
cm<-table(as.numeric(unlist(test_df['Discretized_Read_Rate'])),as.numeric(predictions))
diag(cm)
sum(diag(cm))
sum(cm)
print("Accuracy",sum(diag(cm)/sum(cm)))
print("Accuracy"+sum(diag(cm)/sum(cm)))
print("Accuracy",sum(diag(cm)/sum(cm)))
print(c("Accuracy",sum(diag(cm)/sum(cm))))
